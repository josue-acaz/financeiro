// <auto-generated />
using System;
using Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210816233255_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Api.Models.Account", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("_default")
                        .HasColumnType("boolean");

                    b.Property<bool>("active")
                        .HasColumnType("boolean");

                    b.Property<float>("balance")
                        .HasColumnType("real");

                    b.Property<int>("cost_center_type_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<float>("initial_balance")
                        .HasColumnType("real");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("cost_center_type_id");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("Api.Models.Attachment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("transaction_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("transaction_id");

                    b.ToTable("attachments");
                });

            modelBuilder.Entity("Api.Models.CardOperator", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("card_operators");
                });

            modelBuilder.Entity("Api.Models.City", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<int>("state_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("state_id");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("Api.Models.Contact", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("category_type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("notes")
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("contacts");
                });

            modelBuilder.Entity("Api.Models.ContactAddress", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ContactId")
                        .HasColumnType("integer");

                    b.Property<string>("cep")
                        .HasColumnType("text");

                    b.Property<int?>("city_id")
                        .HasColumnType("integer");

                    b.Property<string>("complement")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("neighborhood")
                        .HasColumnType("text");

                    b.Property<string>("number")
                        .HasColumnType("text");

                    b.Property<string>("street")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("ContactId")
                        .IsUnique();

                    b.HasIndex("city_id");

                    b.ToTable("contact_addresses");
                });

            modelBuilder.Entity("Api.Models.ContactInformation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("company_contact_name")
                        .HasColumnType("text");

                    b.Property<int>("contact_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("mobile")
                        .HasColumnType("text");

                    b.Property<string>("personal_email")
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("work_email")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("contact_id")
                        .IsUnique();

                    b.ToTable("contact_informations");
                });

            modelBuilder.Entity("Api.Models.ContactPf", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("contact_id")
                        .HasColumnType("integer");

                    b.Property<string>("cpf")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("contact_id")
                        .IsUnique();

                    b.ToTable("contact_pfs");
                });

            modelBuilder.Entity("Api.Models.ContactPj", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("cnpj")
                        .HasColumnType("text");

                    b.Property<string>("company_name")
                        .HasColumnType("text");

                    b.Property<int>("contact_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("state_registration")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("contact_id")
                        .IsUnique();

                    b.ToTable("contact_pjs");
                });

            modelBuilder.Entity("Api.Models.CostCenter", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("cost_centers");
                });

            modelBuilder.Entity("Api.Models.CostCenterType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("cost_center_types");
                });

            modelBuilder.Entity("Api.Models.ExpenseGroup", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("expense_groups");
                });

            modelBuilder.Entity("Api.Models.File", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("key")
                        .HasColumnType("text");

                    b.Property<string>("mimetype")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("resource")
                        .HasColumnType("text");

                    b.Property<int>("resource_id")
                        .HasColumnType("integer");

                    b.Property<long>("size")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("url")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("files");
                });

            modelBuilder.Entity("Api.Models.Installment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("due_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("number")
                        .HasColumnType("text");

                    b.Property<bool>("paid")
                        .HasColumnType("boolean");

                    b.Property<int>("transaction_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("value")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("transaction_id");

                    b.ToTable("installments");
                });

            modelBuilder.Entity("Api.Models.PaymentType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("payment_types");
                });

            modelBuilder.Entity("Api.Models.Permisson", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("create")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("delete")
                        .HasColumnType("boolean");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("read")
                        .HasColumnType("boolean");

                    b.Property<string>("resource")
                        .HasColumnType("text");

                    b.Property<bool>("update")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("Api.Models.Split", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("contact_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool>("paid")
                        .HasColumnType("boolean");

                    b.Property<int>("transaction_category_id")
                        .HasColumnType("integer");

                    b.Property<int>("transaction_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("value")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("contact_id");

                    b.HasIndex("transaction_category_id");

                    b.HasIndex("transaction_id");

                    b.ToTable("splits");
                });

            modelBuilder.Entity("Api.Models.State", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("prefix")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("states");
                });

            modelBuilder.Entity("Api.Models.SystemLog", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("_object")
                        .HasColumnType("text");

                    b.Property<string>("action")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.ToTable("system_logs");
                });

            modelBuilder.Entity("Api.Models.Tag", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<int>("transaction_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("transaction_id");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("Api.Models.Transaction", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("account_id")
                        .HasColumnType("integer");

                    b.Property<string>("comment")
                        .HasColumnType("text");

                    b.Property<int>("contact_id")
                        .HasColumnType("integer");

                    b.Property<int>("cost_center_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("document_number")
                        .HasColumnType("text");

                    b.Property<DateTime>("due_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("frequency_main_id")
                        .HasColumnType("integer");

                    b.Property<int>("frequency_number")
                        .HasColumnType("integer");

                    b.Property<int>("frequency_total")
                        .HasColumnType("integer");

                    b.Property<string>("frequency_type")
                        .HasColumnType("text");

                    b.Property<bool>("has_attachment")
                        .HasColumnType("boolean");

                    b.Property<bool>("has_boleto")
                        .HasColumnType("boolean");

                    b.Property<bool>("has_nf")
                        .HasColumnType("boolean");

                    b.Property<bool>("paid")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("pay_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("payment_plan")
                        .HasColumnType("text");

                    b.Property<int>("payment_type_id")
                        .HasColumnType("integer");

                    b.Property<bool>("split")
                        .HasColumnType("boolean");

                    b.Property<int>("transaction_category_id")
                        .HasColumnType("integer");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("value")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("account_id");

                    b.HasIndex("contact_id");

                    b.HasIndex("cost_center_id");

                    b.HasIndex("payment_type_id");

                    b.HasIndex("transaction_category_id");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("Api.Models.TransactionCategory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("expense_group_id")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("expense_group_id");

                    b.ToTable("transaction_categories");
                });

            modelBuilder.Entity("Api.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("password_hash")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Api.Models.UserSetting", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("has_mei_access")
                        .HasColumnType("boolean");

                    b.Property<bool>("has_transactions")
                        .HasColumnType("boolean");

                    b.Property<bool>("is_owner")
                        .HasColumnType("boolean");

                    b.Property<bool>("show_question_update_date_after_pay")
                        .HasColumnType("boolean");

                    b.Property<bool>("update_paydate_after_payment")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("user_id")
                        .HasColumnType("integer");

                    b.Property<bool>("view_all_cost_centers")
                        .HasColumnType("boolean");

                    b.HasKey("id");

                    b.HasIndex("user_id")
                        .IsUnique();

                    b.ToTable("user_settings");
                });

            modelBuilder.Entity("Api.Models.Account", b =>
                {
                    b.HasOne("Api.Models.CostCenterType", "cost_center_type")
                        .WithMany("accounts")
                        .HasForeignKey("cost_center_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cost_center_type");
                });

            modelBuilder.Entity("Api.Models.Attachment", b =>
                {
                    b.HasOne("Api.Models.Transaction", "transaction")
                        .WithMany("attachments")
                        .HasForeignKey("transaction_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("transaction");
                });

            modelBuilder.Entity("Api.Models.City", b =>
                {
                    b.HasOne("Api.Models.State", "state")
                        .WithMany("cities")
                        .HasForeignKey("state_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("state");
                });

            modelBuilder.Entity("Api.Models.ContactAddress", b =>
                {
                    b.HasOne("Api.Models.Contact", "Contact")
                        .WithOne("contact_address")
                        .HasForeignKey("Api.Models.ContactAddress", "ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.City", "city")
                        .WithMany("contact_addresses")
                        .HasForeignKey("city_id");

                    b.Navigation("city");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Api.Models.ContactInformation", b =>
                {
                    b.HasOne("Api.Models.Contact", "contact")
                        .WithOne("contact_information")
                        .HasForeignKey("Api.Models.ContactInformation", "contact_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("contact");
                });

            modelBuilder.Entity("Api.Models.ContactPf", b =>
                {
                    b.HasOne("Api.Models.Contact", "contact")
                        .WithOne("contact_pf")
                        .HasForeignKey("Api.Models.ContactPf", "contact_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("contact");
                });

            modelBuilder.Entity("Api.Models.ContactPj", b =>
                {
                    b.HasOne("Api.Models.Contact", "contact")
                        .WithOne("contact_pj")
                        .HasForeignKey("Api.Models.ContactPj", "contact_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("contact");
                });

            modelBuilder.Entity("Api.Models.Installment", b =>
                {
                    b.HasOne("Api.Models.Transaction", "transaction")
                        .WithMany("installments")
                        .HasForeignKey("transaction_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("transaction");
                });

            modelBuilder.Entity("Api.Models.Permisson", b =>
                {
                    b.HasOne("Api.Models.User", "user")
                        .WithMany("permissons")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Api.Models.Split", b =>
                {
                    b.HasOne("Api.Models.Contact", "contact")
                        .WithMany()
                        .HasForeignKey("contact_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.TransactionCategory", "transaction_category")
                        .WithMany()
                        .HasForeignKey("transaction_category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.Transaction", "transaction")
                        .WithMany("splits")
                        .HasForeignKey("transaction_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("contact");

                    b.Navigation("transaction");

                    b.Navigation("transaction_category");
                });

            modelBuilder.Entity("Api.Models.SystemLog", b =>
                {
                    b.HasOne("Api.Models.User", "user")
                        .WithMany("system_logs")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Api.Models.Tag", b =>
                {
                    b.HasOne("Api.Models.Transaction", "transaction")
                        .WithMany("tags")
                        .HasForeignKey("transaction_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("transaction");
                });

            modelBuilder.Entity("Api.Models.Transaction", b =>
                {
                    b.HasOne("Api.Models.Account", "account")
                        .WithMany("transactions")
                        .HasForeignKey("account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.Contact", "contact")
                        .WithMany()
                        .HasForeignKey("contact_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.CostCenter", "cost_center")
                        .WithMany("transactions")
                        .HasForeignKey("cost_center_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.PaymentType", "payment_type")
                        .WithMany("transactions")
                        .HasForeignKey("payment_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.TransactionCategory", "transaction_category")
                        .WithMany()
                        .HasForeignKey("transaction_category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");

                    b.Navigation("contact");

                    b.Navigation("cost_center");

                    b.Navigation("payment_type");

                    b.Navigation("transaction_category");
                });

            modelBuilder.Entity("Api.Models.TransactionCategory", b =>
                {
                    b.HasOne("Api.Models.ExpenseGroup", "expense_group")
                        .WithMany("transaction_categories")
                        .HasForeignKey("expense_group_id");

                    b.Navigation("expense_group");
                });

            modelBuilder.Entity("Api.Models.UserSetting", b =>
                {
                    b.HasOne("Api.Models.User", "user")
                        .WithOne("user_setting")
                        .HasForeignKey("Api.Models.UserSetting", "user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Api.Models.Account", b =>
                {
                    b.Navigation("transactions");
                });

            modelBuilder.Entity("Api.Models.City", b =>
                {
                    b.Navigation("contact_addresses");
                });

            modelBuilder.Entity("Api.Models.Contact", b =>
                {
                    b.Navigation("contact_address");

                    b.Navigation("contact_information");

                    b.Navigation("contact_pf");

                    b.Navigation("contact_pj");
                });

            modelBuilder.Entity("Api.Models.CostCenter", b =>
                {
                    b.Navigation("transactions");
                });

            modelBuilder.Entity("Api.Models.CostCenterType", b =>
                {
                    b.Navigation("accounts");
                });

            modelBuilder.Entity("Api.Models.ExpenseGroup", b =>
                {
                    b.Navigation("transaction_categories");
                });

            modelBuilder.Entity("Api.Models.PaymentType", b =>
                {
                    b.Navigation("transactions");
                });

            modelBuilder.Entity("Api.Models.State", b =>
                {
                    b.Navigation("cities");
                });

            modelBuilder.Entity("Api.Models.Transaction", b =>
                {
                    b.Navigation("attachments");

                    b.Navigation("installments");

                    b.Navigation("splits");

                    b.Navigation("tags");
                });

            modelBuilder.Entity("Api.Models.User", b =>
                {
                    b.Navigation("permissons");

                    b.Navigation("system_logs");

                    b.Navigation("user_setting");
                });
#pragma warning restore 612, 618
        }
    }
}
